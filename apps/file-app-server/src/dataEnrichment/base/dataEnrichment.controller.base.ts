/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataEnrichmentService } from "../dataEnrichment.service";
import { DataEnrichmentCreateInput } from "./DataEnrichmentCreateInput";
import { DataEnrichment } from "./DataEnrichment";
import { DataEnrichmentFindManyArgs } from "./DataEnrichmentFindManyArgs";
import { DataEnrichmentWhereUniqueInput } from "./DataEnrichmentWhereUniqueInput";
import { DataEnrichmentUpdateInput } from "./DataEnrichmentUpdateInput";

export class DataEnrichmentControllerBase {
  constructor(protected readonly service: DataEnrichmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataEnrichment })
  async createDataEnrichment(
    @common.Body() data: DataEnrichmentCreateInput
  ): Promise<DataEnrichment> {
    return await this.service.createDataEnrichment({
      data: {
        ...data,

        file: data.file
          ? {
              connect: data.file,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        enrichmentDetails: true,

        file: {
          select: {
            id: true,
          },
        },

        id: true,
        processedData: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataEnrichment] })
  @ApiNestedQuery(DataEnrichmentFindManyArgs)
  async dataEnrichments(
    @common.Req() request: Request
  ): Promise<DataEnrichment[]> {
    const args = plainToClass(DataEnrichmentFindManyArgs, request.query);
    return this.service.dataEnrichments({
      ...args,
      select: {
        createdAt: true,
        enrichmentDetails: true,

        file: {
          select: {
            id: true,
          },
        },

        id: true,
        processedData: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataEnrichment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataEnrichment(
    @common.Param() params: DataEnrichmentWhereUniqueInput
  ): Promise<DataEnrichment | null> {
    const result = await this.service.dataEnrichment({
      where: params,
      select: {
        createdAt: true,
        enrichmentDetails: true,

        file: {
          select: {
            id: true,
          },
        },

        id: true,
        processedData: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataEnrichment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataEnrichment(
    @common.Param() params: DataEnrichmentWhereUniqueInput,
    @common.Body() data: DataEnrichmentUpdateInput
  ): Promise<DataEnrichment | null> {
    try {
      return await this.service.updateDataEnrichment({
        where: params,
        data: {
          ...data,

          file: data.file
            ? {
                connect: data.file,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          enrichmentDetails: true,

          file: {
            select: {
              id: true,
            },
          },

          id: true,
          processedData: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataEnrichment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataEnrichment(
    @common.Param() params: DataEnrichmentWhereUniqueInput
  ): Promise<DataEnrichment | null> {
    try {
      return await this.service.deleteDataEnrichment({
        where: params,
        select: {
          createdAt: true,
          enrichmentDetails: true,

          file: {
            select: {
              id: true,
            },
          },

          id: true,
          processedData: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
