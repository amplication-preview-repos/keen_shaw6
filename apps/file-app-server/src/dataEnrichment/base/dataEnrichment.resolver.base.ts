/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataEnrichment } from "./DataEnrichment";
import { DataEnrichmentCountArgs } from "./DataEnrichmentCountArgs";
import { DataEnrichmentFindManyArgs } from "./DataEnrichmentFindManyArgs";
import { DataEnrichmentFindUniqueArgs } from "./DataEnrichmentFindUniqueArgs";
import { CreateDataEnrichmentArgs } from "./CreateDataEnrichmentArgs";
import { UpdateDataEnrichmentArgs } from "./UpdateDataEnrichmentArgs";
import { DeleteDataEnrichmentArgs } from "./DeleteDataEnrichmentArgs";
import { File } from "../../file/base/File";
import { DataEnrichmentService } from "../dataEnrichment.service";
@graphql.Resolver(() => DataEnrichment)
export class DataEnrichmentResolverBase {
  constructor(protected readonly service: DataEnrichmentService) {}

  async _dataEnrichmentsMeta(
    @graphql.Args() args: DataEnrichmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataEnrichment])
  async dataEnrichments(
    @graphql.Args() args: DataEnrichmentFindManyArgs
  ): Promise<DataEnrichment[]> {
    return this.service.dataEnrichments(args);
  }

  @graphql.Query(() => DataEnrichment, { nullable: true })
  async dataEnrichment(
    @graphql.Args() args: DataEnrichmentFindUniqueArgs
  ): Promise<DataEnrichment | null> {
    const result = await this.service.dataEnrichment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataEnrichment)
  async createDataEnrichment(
    @graphql.Args() args: CreateDataEnrichmentArgs
  ): Promise<DataEnrichment> {
    return await this.service.createDataEnrichment({
      ...args,
      data: {
        ...args.data,

        file: args.data.file
          ? {
              connect: args.data.file,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DataEnrichment)
  async updateDataEnrichment(
    @graphql.Args() args: UpdateDataEnrichmentArgs
  ): Promise<DataEnrichment | null> {
    try {
      return await this.service.updateDataEnrichment({
        ...args,
        data: {
          ...args.data,

          file: args.data.file
            ? {
                connect: args.data.file,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataEnrichment)
  async deleteDataEnrichment(
    @graphql.Args() args: DeleteDataEnrichmentArgs
  ): Promise<DataEnrichment | null> {
    try {
      return await this.service.deleteDataEnrichment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => File, {
    nullable: true,
    name: "file",
  })
  async getFile(
    @graphql.Parent() parent: DataEnrichment
  ): Promise<File | null> {
    const result = await this.service.getFile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
