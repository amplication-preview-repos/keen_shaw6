/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileService } from "../file.service";
import { FileCreateInput } from "./FileCreateInput";
import { File } from "./File";
import { FileFindManyArgs } from "./FileFindManyArgs";
import { FileWhereUniqueInput } from "./FileWhereUniqueInput";
import { FileUpdateInput } from "./FileUpdateInput";
import { DatabaseFindManyArgs } from "../../database/base/DatabaseFindManyArgs";
import { Database } from "../../database/base/Database";
import { DatabaseWhereUniqueInput } from "../../database/base/DatabaseWhereUniqueInput";
import { DataEnrichmentFindManyArgs } from "../../dataEnrichment/base/DataEnrichmentFindManyArgs";
import { DataEnrichment } from "../../dataEnrichment/base/DataEnrichment";
import { DataEnrichmentWhereUniqueInput } from "../../dataEnrichment/base/DataEnrichmentWhereUniqueInput";

export class FileControllerBase {
  constructor(protected readonly service: FileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: File })
  async createFile(@common.Body() data: FileCreateInput): Promise<File> {
    return await this.service.createFile({
      data: data,
      select: {
        createdAt: true,
        filecontent: true,
        filename: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [File] })
  @ApiNestedQuery(FileFindManyArgs)
  async files(@common.Req() request: Request): Promise<File[]> {
    const args = plainToClass(FileFindManyArgs, request.query);
    return this.service.files({
      ...args,
      select: {
        createdAt: true,
        filecontent: true,
        filename: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: File })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async file(
    @common.Param() params: FileWhereUniqueInput
  ): Promise<File | null> {
    const result = await this.service.file({
      where: params,
      select: {
        createdAt: true,
        filecontent: true,
        filename: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: File })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFile(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() data: FileUpdateInput
  ): Promise<File | null> {
    try {
      return await this.service.updateFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          filecontent: true,
          filename: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: File })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFile(
    @common.Param() params: FileWhereUniqueInput
  ): Promise<File | null> {
    try {
      return await this.service.deleteFile({
        where: params,
        select: {
          createdAt: true,
          filecontent: true,
          filename: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/databases")
  @ApiNestedQuery(DatabaseFindManyArgs)
  async findDatabases(
    @common.Req() request: Request,
    @common.Param() params: FileWhereUniqueInput
  ): Promise<Database[]> {
    const query = plainToClass(DatabaseFindManyArgs, request.query);
    const results = await this.service.findDatabases(params.id, {
      ...query,
      select: {
        createdAt: true,
        dataContent: true,

        file: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/databases")
  async connectDatabases(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() body: DatabaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      databases: {
        connect: body,
      },
    };
    await this.service.updateFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/databases")
  async updateDatabases(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() body: DatabaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      databases: {
        set: body,
      },
    };
    await this.service.updateFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/databases")
  async disconnectDatabases(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() body: DatabaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      databases: {
        disconnect: body,
      },
    };
    await this.service.updateFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/dataEnrichments")
  @ApiNestedQuery(DataEnrichmentFindManyArgs)
  async findDataEnrichments(
    @common.Req() request: Request,
    @common.Param() params: FileWhereUniqueInput
  ): Promise<DataEnrichment[]> {
    const query = plainToClass(DataEnrichmentFindManyArgs, request.query);
    const results = await this.service.findDataEnrichments(params.id, {
      ...query,
      select: {
        createdAt: true,
        enrichmentDetails: true,

        file: {
          select: {
            id: true,
          },
        },

        id: true,
        processedData: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dataEnrichments")
  async connectDataEnrichments(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() body: DataEnrichmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataEnrichments: {
        connect: body,
      },
    };
    await this.service.updateFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dataEnrichments")
  async updateDataEnrichments(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() body: DataEnrichmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataEnrichments: {
        set: body,
      },
    };
    await this.service.updateFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dataEnrichments")
  async disconnectDataEnrichments(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() body: DataEnrichmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataEnrichments: {
        disconnect: body,
      },
    };
    await this.service.updateFile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
