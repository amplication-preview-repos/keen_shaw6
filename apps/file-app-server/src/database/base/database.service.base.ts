/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Database as PrismaDatabase,
  File as PrismaFile,
} from "@prisma/client";

export class DatabaseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DatabaseCountArgs, "select">): Promise<number> {
    return this.prisma.database.count(args);
  }

  async databases<T extends Prisma.DatabaseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DatabaseFindManyArgs>
  ): Promise<PrismaDatabase[]> {
    return this.prisma.database.findMany<Prisma.DatabaseFindManyArgs>(args);
  }
  async database<T extends Prisma.DatabaseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DatabaseFindUniqueArgs>
  ): Promise<PrismaDatabase | null> {
    return this.prisma.database.findUnique(args);
  }
  async createDatabase<T extends Prisma.DatabaseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DatabaseCreateArgs>
  ): Promise<PrismaDatabase> {
    return this.prisma.database.create<T>(args);
  }
  async updateDatabase<T extends Prisma.DatabaseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DatabaseUpdateArgs>
  ): Promise<PrismaDatabase> {
    return this.prisma.database.update<T>(args);
  }
  async deleteDatabase<T extends Prisma.DatabaseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DatabaseDeleteArgs>
  ): Promise<PrismaDatabase> {
    return this.prisma.database.delete(args);
  }

  async getFile(parentId: string): Promise<PrismaFile | null> {
    return this.prisma.database
      .findUnique({
        where: { id: parentId },
      })
      .file();
  }
}
